import heapq
from collections import defaultdict
import time

class GrafoPonderado:
    def _init_(self):
        # Usamos un conjunto para los vértices
        self.vertices = set()
        # Creamos un diccionario para las aristas con peso
        self.aristas = defaultdict(list)

    def agregar_vertice(self, vertice):
        self.vertices.add(vertice)

    def agregar_arista(self, desde_vertice, hacia_vertice, peso):
        self.vertices.add(desde_vertice)
        self.vertices.add(hacia_vertice)
        self.aristas[desde_vertice].append((hacia_vertice, peso))
        self.aristas[hacia_vertice].append((desde_vertice, peso))

    def dijkstra(self, vertice_inicial):
        distancias = {vertice: float('infinity') for vertice in self.vertices}
        distancias[vertice_inicial] = 0
        # Usamos defaultdict para los padres
        padres = defaultdict(lambda: None)
        cola_prioridad = [(0, vertice_inicial)]
        tiempo_inicio = time.time()

        while cola_prioridad:
            distancia_actual, vertice_actual = heapq.heappop(cola_prioridad)
            if distancia_actual > distancias[vertice_actual]:
                continue
            for vecino, peso_arista in self.aristas[vertice_actual]:
                distancia = distancia_actual + peso_arista
                if distancia < distancias[vecino]:
                    distancias[vecino] = distancia
                    padres[vecino] = vertice_actual
                    heapq.heappush(cola_prioridad, (distancia, vecino))

        tiempo_fin = time.time()
        tiempo_transcurrido = tiempo_fin - tiempo_inicio
        caminos_minimos = {vertice: self.construir_camino(vertice_inicial, vertice, padres) for vertice in self.vertices}
        return distancias, caminos_minimos, tiempo_transcurrido

    def construir_camino(self, vertice_inicial, vertice_final, padres):
        camino = []
        vertice_actual = vertice_final
        while vertice_actual is not None:
            camino.insert(0, vertice_actual)
            vertice_actual = padres[vertice_actual]
        return camino

# Ejemplo de uso del grafo
grafo = GrafoPonderado()
grafo.agregar_vertice("A")
grafo.agregar_vertice("B")
grafo.agregar_vertice("C")
grafo.agregar_vertice("D")
grafo.agregar_vertice("E")
grafo.agregar_vertice("F")
grafo.agregar_vertice("G")
grafo.agregar_vertice("H")
grafo.agregar_vertice("I")
grafo.agregar_arista("A", "B", 1)
grafo.agregar_arista("B", "C", 2)
grafo.agregar_arista("A", "C", 4)
grafo.agregar_arista("C", "D", 7)
grafo.agregar_arista("B", "E", 3)
grafo.agregar_arista("E", "F", 5)
grafo.agregar_arista("C", "G", 2)
grafo.agregar_arista("G", "H", 1)
grafo.agregar_arista("H", "I", 3)

vertice_inicial = "A"
distancias, caminos_minimos, tiempo_ejecucion = grafo.dijkstra(vertice_inicial)

print("*********************\n")
print(f"El camino más corto localizado es: {vertice_inicial}: {distancias}\n")
print("*********************\n")

for vertice, camino in caminos_minimos.items():
    print("*********************\n")
    print(f"El recorrido comienza desde {vertice_inicial} hasta {vertice}: {camino}\n")
print("*********************\n")
print("*********************\n")
print(f"El tiempo que tarda en ejecutarse es de: {tiempo_ejecucion} segundos")
print("*********************\n")
